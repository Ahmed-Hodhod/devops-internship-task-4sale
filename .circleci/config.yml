version: 2.1
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

  aws-ecs: circleci/aws-ecs@3.2.0

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks  and remove files from s3
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             echo "Destroying environment:${CIRCLE_WORKFLOW_ID:0:7}"
#             aws cloudformation delete-stack --stack-name updapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#             aws cloudformation delete-stack --stack-name updapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
#             aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

jobs:
  build-api:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: API build
          command: |
            cd ping-pong-app
            npm install
            npm start &
      - save_cache:
          paths: [ping-pong-app/node_modules]
          key: api-build

  build-and-push-image:
    docker:
      - image: circleci/node:16.3.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push Docker image
          command: |
            # Build the Docker image
            cd ping-pong-app

            docker build -t $DOCKERHUB_USERNAME/ping-pong-app .

            # Log in to Docker Hub

            docker login -u $DOCKERHUB_USERNAME	 -p $DOCKERHUB_PASSWORD
            echo logged

            # Push the Docker image to Docker Hub
            docker push $DOCKERHUB_USERNAME/ping-pong-app

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the cluster infrastructure
          no_output_timeout: 50m
          command: |

            aws cloudformation deploy --template-file .circleci/amazon-eks-vpc-private-subnets.yaml \
              --stack-name eks-4sale --parameter-overrides EKSIAMRoleName=eks_role \
              EKSClusterName=cluster-4sale --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Deploy the worker nodes
          no_output_timeout: 50m
          command: |
            sg=`aws cloudformation describe-stacks --region us-east-1  --query "Stacks[?StackName=='eks-4sale'][].Outputs[?OutputKey=='SecurityGroups'].OutputValue"  --output text`
            subnets=`aws cloudformation describe-stacks --region us-east-1  --query "Stacks[?StackName=='eks-4sale'][].Outputs[?OutputKey=='SubnetIds'].OutputValue"  --output text`
            vpc=`aws cloudformation describe-stacks --region us-east-1  --query "Stacks[?StackName=='eks-4sale'][].Outputs[?OutputKey=='VpcId'].OutputValue"  --output text`

            aws cloudformation deploy --template-file .circleci/amazon-eks-nodegroup.yaml \
             --stack-name eks-ng --capabilities CAPABILITY_NAMED_IAM --parameter-overrides  ClusterName=cluster-4sale ClusterControlPlaneSecurityGroup="${sg}" KeyName=eks NodeGroupName=eks-ng Subnets="${subnets}" VpcId="${vpc}"

      #- destroy-environment

  deploy-eks-objects:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: cluster-4sale

      - run:
          command: |
            kubectl apply -f eks/app-deployment.yml
            kubectl apply -f eks/app-service.yml
            kubectl get services
            kubectl get deployments 
            kubectl describe deployment app-deployment
            kubectl describe service app-service
            kubectl get pods 
            kubectl get nodes

          name: Deploy objects to EKS

workflows:
  default:
    jobs:
      - build-api
      - build-and-push-image:
          requires: [build-api]
      #- deploy-infrastructure:
      #      requires: [build-and-push-image]
      - deploy-eks-objects:
            requires: [build-and-push-image]
